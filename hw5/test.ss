;;;;;;;;;;; Test
(define ils (append '(a e i o u) 'y))
(define d1 (cons ils (cdr (cdr ils))))
(define d2 (cons ils ils))
(define d3 (cons ils (append '(a e i o u) 'y)))
(define d4 (cons '() ils))
(define d5 0)
(define d6 (listdiff ils d1 37))
(define d7 (append-ld d1 d2 d6))

(define kv1 (cons d1 'a))
(define kv2 (cons d2 'b))
(define kv3 (cons d3 'c))
(define kv4 (cons d1 'd))
(define d8 (listdiff kv1 kv2 kv3 kv4))
(eq? (assq-ld d1 d8) kv1)
(eq? (assq-ld d2 d8) kv2)
(not (eq? (assq-ld d1 d8) kv4))

(eq? (listdiff? d1) #t)
(eq? (listdiff? d2) #t)
(eq? (listdiff? d3) #f)
(eq? (listdiff? d4) #f)
(eq? (listdiff? d5) #f)
(eq? (listdiff? d6) #t)
(eq? (listdiff? d7) #t)

(eq? (null-ld? d1) #f)
(eq? (null-ld? d2) #t)
(eq? (null-ld? d3) #f)
(eq? (null-ld? d6) #f)

(equal? (car-ld d1) 'a)
(equal? (car-ld d6) '(a e i o u . y))

(eq? (car-ld d6) ils) 
(eq? (car-ld (cdr-ld d6)) d1)
(eqv? (car-ld (cdr-ld (cdr-ld d6))) 37)
(equal? (listdiff->list d6) (list ils d1 37))
(eq? (list-tail (car d6) 3) (cdr d6))

(define e1 (expr-returning d1))
(equal? (listdiff->list (eval e1)) '(a e))
(equal? (listdiff->list (eval e1)) (listdiff->list d1))
